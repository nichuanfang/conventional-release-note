name: "conventional-release-note"
description: "Create release notes which contents   are sorted by the conventional commit rule"
author: "mapbox-jp"
inputs:
  current-tag:
    required: true
    description: >
      Sets the current tag. This will be used in extracting logs in the specific range of tags.
      Logs are extracted in condition of `${previous-tag}...${current-tag}`.
      This option decides what tag you'd like to set as the end of the range.
      The default value is `github.ref_name`, but you can set a specific tag whatever you like.
    default: ${{ github.ref_name }}
  previous-tag:
    required: false
    description: >
      Sets the previous tag. This will be used in extracting logs in the specific range of tags.
      Logs are extracted in condition of `${previous-tag}...${current-tag}`.
      This option decides what tag you'd like to set as the start of the range.
      You don't need to set this options as usual, but you can set a specific tag whatever you like.
  tag-pattern:
    required: false
    description: >
      Filters tags by this option. This will be used as a parameter of `git tag --list [tag-pattern]`.
      If this passed with empty string, `git tag` will be executed. It means getting all tags indiscriminately.
  kind:
    required: false
    description: Decides what kind of the commit convention you would like to use. Now the action has only "default".
    default: "default"
  scopes:
    required: false
    description: >
      If scopes are set, this action will only include commit logs with their scopes (others are excluded).
      For example, assume that the following commit logs:
      - feat(core): add a feature
      - feat(util): add a feature
      - feat(debug): add a feature
      - feat: add a feature
      And assume that the following `scopes` is set as well:
      ```
      - scopes |
          core
          util
      ```
      Then the following release note will be generated.
      ```
      ## Features
      - feat(core): add a feature
      - feat(util): add a feature
      ```
  include-non-scoped:
    required: false
    description: >
      This option is for a use case to include commit logs without scopes even if "scopes" option is set. 
      For example, assume that the following commit logs:
      - feat(util): add a feature
      - feat: add a feature
      - feat(debug): add a feature
      And assume that the following `scopes` and `include-non-scoped` are set as well:
      ```
      - scopes |
          util
      - include-non-scoped: true
      ```
      Then the following release note will be generated.
      ```
      ## Features
      - feat(util): add a feature
      - feat: add a feature
      ```
    default: "false"

runs:
  using: "node16"
  main: "dist/index.js"
